<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>整理了一些近些年项目中用到的工具函数</title>
    <link href="/2023/03/10/%E6%95%B4%E7%90%86%E4%BA%86%E4%B8%80%E4%BA%9B%E8%BF%91%E4%BA%9B%E5%B9%B4%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/"/>
    <url>/2023/03/10/%E6%95%B4%E7%90%86%E4%BA%86%E4%B8%80%E4%BA%9B%E8%BF%91%E4%BA%9B%E5%B9%B4%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="工具函数"><a href="#工具函数" class="headerlink" title="工具函数"></a>工具函数</h1><ol><li>数字操作<ol><li>生成指定范围随机数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">randomNum</span> = (<span class="hljs-params">min, max</span>) =&gt; <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (max - min + <span class="hljs-number">1</span>)) + min;<br></code></pre></td></tr></table></figure></li><li>数字千分位分隔符<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">format</span> = (<span class="hljs-params">n</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> num = n.<span class="hljs-title function_">toString</span>();<br>  <span class="hljs-keyword">let</span> len = num.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-keyword">return</span> num;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">let</span> temp = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">let</span> remainder = len % <span class="hljs-number">3</span>;<br>    <span class="hljs-comment">// 不是3的整倍数</span><br>    <span class="hljs-keyword">if</span> (remainder &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> (<br>        num.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, remainder) + <span class="hljs-string">&quot;,&quot;</span> +<br>        num.<span class="hljs-title function_">slice</span>(remainder, len).<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\d&#123;3&#125;/g</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;,&quot;</span>) + temp);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> num.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, len).<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\d&#123;3&#125;/g</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;,&quot;</span>) + temp;<br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol></li><li>数组操作<ol><li>数组乱序<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">arrScrambling</span> = arr =&gt; &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> randomIndex = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span> - i)) + i;<br>    ([arr[i], arr[randomIndex]] = [arr[randomIndex]]), arr[i];<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>数组扁平<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">flatten</span> = (<span class="hljs-params">arr</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> result = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr[i])<br>      ? (result = result.<span class="hljs-title function_">concat</span>(<span class="hljs-title function_">flatten</span>(arr[i])))<br>      : result.<span class="hljs-title function_">push</span>(arr[i]);<br>  &#125;<br>  <span class="hljs-keyword">return</span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>数组中获取随机数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">sample</span> = (<span class="hljs-params">arr</span>) =&gt; arr[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * arr.<span class="hljs-property">length</span>)];<br></code></pre></td></tr></table></figure></li></ol></li><li>字符串操作<ol><li>随机生成字符串<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">randomString</span> = (<span class="hljs-params">len</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> chars = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz123456789&quot;</span>;<br>  <span class="hljs-keyword">let</span> strLen = chars.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">let</span> randomStr = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    randomStr += chars.<span class="hljs-title function_">charAt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * strLen));<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>字符串首字母大写<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">fistLetterUpper</span> = (<span class="hljs-params">str</span>) =&gt; str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUpperCase</span>() + str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li>手机号中间四位替换成<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">telFormat</span> = (<span class="hljs-params">tel</span>) =&gt; &#123;<br>  tel = <span class="hljs-title class_">String</span>(tel);<br>  <span class="hljs-keyword">return</span> tel.<span class="hljs-title function_">substr</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>) + <span class="hljs-string">&quot;****&quot;</span> + tel.<span class="hljs-title function_">substr</span>(<span class="hljs-number">7</span>);<br>&#125;;<br><br></code></pre></td></tr></table></figure></li><li>驼峰命名转换为短横线命名<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getKebabCase</span> = str =&gt; str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[A-Z]/g</span>, <span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-string">&#x27;-&#x27;</span> + item.<span class="hljs-title function_">toLowerCase</span>())<br></code></pre></td></tr></table></figure></li><li>短横线命名转换为驼峰命名<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getCamelCase</span> = str =&gt; str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/-([a-z])/g</span>, <span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-title function_">toUpperCase</span>())<br></code></pre></td></tr></table></figure></li><li>全角转半角<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">toCDB</span> = str =&gt; &#123;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-property">length</span>; i++) &#123;<br>    code = str.<span class="hljs-title function_">charCodeAt</span>(i)<br>    <span class="hljs-keyword">if</span> (code &gt;= <span class="hljs-number">65281</span> &amp;&amp; code &lt;= <span class="hljs-number">65374</span>) &#123;<br>      result += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(str.<span class="hljs-title function_">charCodeAt</span>(i) - <span class="hljs-number">65248</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code == <span class="hljs-number">12288</span>) &#123;<br>      result += string.<span class="hljs-title function_">fromCharCode</span>(str.<span class="hljs-title function_">charCodeAt</span>(i) - <span class="hljs-number">12288</span> + <span class="hljs-number">32</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      result += str.<span class="hljs-title function_">charAt</span>(i)<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure></li><li>半角转换为全角<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">toDBC</span> = (<span class="hljs-params">str</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-property">length</span>; i++) &#123;<br>    code = str.<span class="hljs-title function_">charCodeAt</span>(i)<br>    <span class="hljs-keyword">if</span> (code &gt;= <span class="hljs-number">33</span> &amp;&amp; code &lt;= <span class="hljs-number">126</span>) &#123;<br>      result += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(str.<span class="hljs-title function_">charCodeAt</span>(i) + <span class="hljs-number">65248</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (code == <span class="hljs-number">32</span>) &#123;<br>      result += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(str.<span class="hljs-title function_">charCodeAt</span>(i) + <span class="hljs-number">12288</span> - <span class="hljs-number">32</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      result += str.<span class="hljs-title function_">charAt</span>(i)<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li>格式转化<ol><li>数字转大写<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">digitUppercase</span> = (<span class="hljs-params">n</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> fraction = [<span class="hljs-string">&#x27;角&#x27;</span>, <span class="hljs-string">&#x27;分&#x27;</span>]<br>  <span class="hljs-keyword">const</span> digit = [<span class="hljs-string">&#x27;零&#x27;</span>, <span class="hljs-string">&#x27;壹&#x27;</span>, <span class="hljs-string">&#x27;贰&#x27;</span>, <span class="hljs-string">&#x27;叁&#x27;</span>, <span class="hljs-string">&#x27;肆&#x27;</span>, <span class="hljs-string">&#x27;伍&#x27;</span>, <span class="hljs-string">&#x27;陆&#x27;</span>, <span class="hljs-string">&#x27;柒&#x27;</span>, <span class="hljs-string">&#x27;捌&#x27;</span>, <span class="hljs-string">&#x27;玖&#x27;</span>]<br>  <span class="hljs-keyword">const</span> unit = [<br>    [<span class="hljs-string">&#x27;元&#x27;</span>, <span class="hljs-string">&#x27;万&#x27;</span>, <span class="hljs-string">&#x27;亿&#x27;</span>],<br>    [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;拾&#x27;</span>, <span class="hljs-string">&#x27;佰&#x27;</span>, <span class="hljs-string">&#x27;仟&#x27;</span>],<br>  ]<br>  n = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(n)<br>  <span class="hljs-keyword">let</span> s = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; fraction.<span class="hljs-property">length</span>; i++) &#123;<br>    s += digit[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(n * <span class="hljs-number">10</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">10</span>, i)) % <span class="hljs-number">10</span>] + fraction[i].<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/零./</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>  &#125;<br>  s = s || <span class="hljs-string">&#x27;整&#x27;</span><br>  n = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(n)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; unit[<span class="hljs-number">0</span>].<span class="hljs-property">length</span> &amp;&amp; n &gt; <span class="hljs-number">0</span>; i++) &#123;<br>    <span class="hljs-keyword">let</span> p = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; unit[<span class="hljs-number">1</span>].<span class="hljs-property">length</span> &amp;&amp; n &gt; <span class="hljs-number">0</span>; j++) &#123;<br>      p = digit[n % <span class="hljs-number">10</span>] + unit[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + p<br>      n = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(n / <span class="hljs-number">10</span>)<br>    &#125;<br>    s = p.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(零.)*零$/</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^$/</span>, <span class="hljs-string">&#x27;零&#x27;</span>) + unit[<span class="hljs-number">0</span>][i] + s<br>  &#125;<br>  <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(零.)*零元$/</span>, <span class="hljs-string">&#x27;元&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(零.)+/g</span>, <span class="hljs-string">&#x27;零&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^整$/</span>, <span class="hljs-string">&#x27;零元整&#x27;</span>)<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>数字转中文数字<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">intToChinese</span> = (<span class="hljs-params">value</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> str = <span class="hljs-title class_">String</span>(value);<br>  <span class="hljs-keyword">const</span> len = str.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">const</span> idxs = [ <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;十&#x27;</span>, <span class="hljs-string">&#x27;百&#x27;</span>, <span class="hljs-string">&#x27;千&#x27;</span>, <span class="hljs-string">&#x27;万&#x27;</span>, <span class="hljs-string">&#x27;十&#x27;</span>, <span class="hljs-string">&#x27;百&#x27;</span>, <span class="hljs-string">&#x27;千&#x27;</span>, <span class="hljs-string">&#x27;亿&#x27;</span>, <span class="hljs-string">&#x27;十&#x27;</span>, <span class="hljs-string">&#x27;百&#x27;</span>, <span class="hljs-string">&#x27;千&#x27;</span>, <span class="hljs-string">&#x27;万&#x27;</span>, <span class="hljs-string">&#x27;十&#x27;</span>, <span class="hljs-string">&#x27;百&#x27;</span>, <span class="hljs-string">&#x27;千&#x27;</span>, <span class="hljs-string">&#x27;亿&#x27;</span> ];<br>  <span class="hljs-keyword">const</span> num = [ <span class="hljs-string">&#x27;零&#x27;</span>, <span class="hljs-string">&#x27;一&#x27;</span>, <span class="hljs-string">&#x27;二&#x27;</span>, <span class="hljs-string">&#x27;三&#x27;</span>, <span class="hljs-string">&#x27;四&#x27;</span>, <span class="hljs-string">&#x27;五&#x27;</span>, <span class="hljs-string">&#x27;六&#x27;</span>, <span class="hljs-string">&#x27;七&#x27;</span>, <span class="hljs-string">&#x27;八&#x27;</span>, <span class="hljs-string">&#x27;九&#x27;</span>, <span class="hljs-string">&#x27;十&#x27;</span> ];<br>  <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/([1-9]|0+)/g</span>, <span class="hljs-function">(<span class="hljs-params">$, $1, idx, full</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> pos = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> ($1[<span class="hljs-number">0</span>] !== <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>      pos = len - idx<br>      <span class="hljs-keyword">if</span> (idx == <span class="hljs-number">0</span> &amp;&amp; $1[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span> &amp;&amp; idxs[len - idx] == <span class="hljs-string">&#x27;十&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> idxs[len - idx]<br>      &#125;<br>      <span class="hljs-keyword">return</span> num[$1[<span class="hljs-number">0</span>]] + ids[len - idx]<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">let</span> left = len - idx<br>      <span class="hljs-keyword">let</span> right = len - idx + $1.<span class="hljs-property">length</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(right / <span class="hljs-number">4</span>) - <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">f1oor</span>(left / <span class="hljs-number">4</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        pos = left - (left % <span class="hljs-number">4</span>)<br>      &#125;<br>      <span class="hljs-keyword">if</span> (pos) &#123;<br>        <span class="hljs-keyword">return</span> idxs[pos] + num[$1[<span class="hljs-number">0</span>]]<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (idx + $1.<span class="hljs-property">length</span> &gt;= len) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> num[$1[<span class="hljs-number">0</span>]]<br>      &#125;<br>    &#125;<br>  &#125;)<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol></li><li>浏览器存储操作<ol><li>存loalStorage<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">loalStorageSet</span> = (<span class="hljs-params">key, value</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!key) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value !== <span class="hljs-string">&#x27;string&#x27;</span>) value = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(value);<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">setItem</span>(key, value);<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>取loalStorage<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">loalStorageGet</span> = key =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!key) <span class="hljs-keyword">return</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">getItem</span>(key)<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>删loalStorage<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">loalStorageRemove</span> = key =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!key) <span class="hljs-keyword">return</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">removeItem</span>(key)<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>存sessionStorage<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">sessionStirageSet</span> = (<span class="hljs-params">key, value</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!key) <span class="hljs-keyword">return</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value !== <span class="hljs-string">&#x27;string&#x27;</span>) value = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(value)<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">sessionStorage</span>.<span class="hljs-title function_">setItem</span>(key, value)<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>取sessionStorage<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">sessionStirageGet</span> = key =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!key) <span class="hljs-keyword">return</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">sessionStorage</span>.<span class="hljs-title function_">getItem</span>(key)<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>删sessionStorage<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">sessionStirageRemove</span> = key =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!key) <span class="hljs-keyword">return</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">sessionStorage</span>.<span class="hljs-title function_">removeItem</span>(key)<br>&#125;;<br><br></code></pre></td></tr></table></figure></li><li>存cookie<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">setCookie</span> = (<span class="hljs-params">key, value, expire</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>  d.<span class="hljs-title function_">setDate</span>(d.<span class="hljs-title function_">getDate</span>() + expire)<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;value&#125;</span>;expires=<span class="hljs-subst">$&#123;d.toUTCString()&#125;</span>`</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li>取cookie<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getCookie</span> = (<span class="hljs-params">key</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> cookieStr = <span class="hljs-built_in">unescape</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)<br>  <span class="hljs-keyword">const</span> arr = cookieStr.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;;&#x27;</span>)<br>  <span class="hljs-keyword">let</span> cookieValue = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> temp = arr[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;=&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (temp[<span class="hljs-number">0</span>] === key) &#123;<br>      cookieValue = temp[<span class="hljs-number">1</span>]<br>      <span class="hljs-keyword">break</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> cookieValue<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>删cookie<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">delCookie</span> = key =&gt; (<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(key)&#125;</span>=;expires=<span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()&#125;</span>`</span>);<br></code></pre></td></tr></table></figure></li></ol></li><li>格式校验<ol><li>校验身份证号码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">checkCardNo</span> = value =&gt; &#123;<br>  <span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/(^\d&#123;15&#125;$)|(^\d&#123;17&#125;(\d|x|x$))/</span><br>  <span class="hljs-keyword">return</span> reg.<span class="hljs-title function_">test</span>(value)<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>校验是否包含中文<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">haveCNChars</span> = value =&gt; <span class="hljs-regexp">/[\u4e00-\u9fa5]/</span>.<span class="hljs-title function_">test</span>(value);<br></code></pre></td></tr></table></figure></li><li>校验邮箱地址<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">isEmail</span> = value =&gt; <span class="hljs-regexp">/^[a-zA=Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/</span>.<span class="hljs-title function_">test</span>(value);<br></code></pre></td></tr></table></figure></li><li>校验是否为中国大陆的邮政编码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">isPostCode</span> = value =&gt; <span class="hljs-regexp">/^[1-9][0-9]257$/</span>.<span class="hljs-title function_">test</span>(value.<span class="hljs-title function_">toString</span>());<br></code></pre></td></tr></table></figure></li><li>校验是否为1Pv6地址<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">isIPv6</span> = (<span class="hljs-params">str</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Boolean</span>(<br>    str.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/:g/</span>)<br>      ? str.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/:g/</span>).<span class="hljs-property">length</span> &lt;= <span class="hljs-number">7</span><br>      : <span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-regexp">/::/</span>.<span class="hljs-title function_">test</span>(str)<br>      ? <span class="hljs-regexp">/^([\da-f]&#123;1,4&#125;(:|::))&#123;1, 6&#125;[\da-f]&#123;1,4&#125;$/i</span>.<span class="hljs-title function_">test</span>(str)<br>      : <span class="hljs-regexp">/^([\da-f]&#123;1,4&#125;:)&#123;7&#125;[\da-f]&#123;1,4&#125;$/i</span>.<span class="hljs-title function_">test</span>(str)<br>  )<br>&#125;<br></code></pre></td></tr></table></figure></li><li>校验手机号码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">isTel</span> = value =&gt; <span class="hljs-regexp">/^1[3,4.5.6,7,8,9][0-9]&#123;9&#125;$/</span>.<span class="hljs-title function_">test</span>(value.<span class="hljs-title function_">tostring</span>())<br></code></pre></td></tr></table></figure></li><li>检验是否包含emoji表情<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">isEmojiCharacter</span> = (<span class="hljs-params">value</span>) =&gt; &#123;<br>  value = <span class="hljs-title class_">String</span>(value);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; value.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> hs = value.<span class="hljs-title function_">charCodeAt</span>(i);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0xd800</span> &lt; hs &amp;&amp; hs &lt;= <span class="hljs-number">0xdbff</span>) &#123;<br>      <span class="hljs-keyword">const</span> ls = value.<span class="hljs-title function_">charCodeAt</span>(i + <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">const</span> uc = (hs - <span class="hljs-number">0xd800</span>) * <span class="hljs-number">0x400</span> + (ls - oxdc00) + <span class="hljs-number">0x10000</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-number">0x1d00</span> &lt;= uc &amp;&amp; uc &lt;= <span class="hljs-number">0x1f77f</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value.<span class="hljs-property">len</span> &gt; <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">const</span> ls = value.<span class="hljs-title function_">charCodeAt</span>(i + <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">if</span> (ls == <span class="hljs-number">0x20e4</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-number">0x2100</span> &lt;= hs &amp;&amp; hs &lt;= <span class="hljs-number">0x2b07</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0x2b05</span> &lt;= hs &amp;&amp; hs &lt;= <span class="hljs-number">0x2b07</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0x2934</span> &lt;= hs &amp;&amp; hs &lt;= <span class="hljs-number">0x2935</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0x3297</span> &lt;= hs &amp;&amp; hs &lt;= <span class="hljs-number">0x3299</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<br>        hs == <span class="hljs-number">0xa9</span> ||<br>        hs == <span class="hljs-number">0xae</span> ||<br>        hs == <span class="hljs-number">0x303d</span> ||<br>        hs == <span class="hljs-number">0x3030</span> ||<br>        hs == <span class="hljs-number">0x2b55</span> ||<br>        hs == <span class="hljs-number">0x2b1c</span> ||<br>        hs == <span class="hljs-number">0x2b1b</span> ||<br>        hs == <span class="hljs-number">0x2b50</span><br>      )<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol></li><li>操作URL<ol><li>获取URL参数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getRequest</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> url = location.<span class="hljs-property">search</span><br>  <span class="hljs-keyword">const</span> paramsStr = <span class="hljs-regexp">/.+\?(.+)$/</span>.<span class="hljs-title function_">exec</span>(url)[<span class="hljs-number">1</span>]<br>  <span class="hljs-keyword">const</span> paramsArr = paramsStr.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>)<br>  <span class="hljs-keyword">let</span> paramsObj = &#123;&#125;<br>  paramsArr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">param</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/=/</span>.<span class="hljs-title function_">test</span>(param)) &#123;<br>      <span class="hljs-keyword">let</span> [key, val] = param.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;=&#x27;</span>)<br>      val = <span class="hljs-built_in">decodeURIComponent</span>(val)<br>      val = <span class="hljs-regexp">/^\d+$/</span>.<span class="hljs-title function_">test</span>(val) ? <span class="hljs-built_in">parseFloat</span>(val) : val<br>      <span class="hljs-keyword">if</span> (paramsObj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>        paramsObj[key] = [].<span class="hljs-title function_">concat</span>(paramsObj[key], val)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        paramsObj[key] = val<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      paramsObj[param] = <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> paramsObj<br>&#125;<br></code></pre></td></tr></table></figure></li><li>检测URL是否有效<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getUriState</span> = (<span class="hljs-params">URL</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> xmlhttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&#x27;microsoft.xmlhttp&#x27;</span>);<br>  xmilhttp.<span class="hljs-title class_">Open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-variable constant_">URL</span>, <span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">try</span> &#123;<br>    xmlhttp.<span class="hljs-title class_">Send</span>();<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">let</span> result = xmlhttp.<span class="hljs-property">responseText</span>;<br>    result ? (xmlhttp.<span class="hljs-property">Status</span> == <span class="hljs-number">200</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>) : <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>键值对拼接成URL参数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">params2URL</span> = obj =&gt; &#123;<br>  <span class="hljs-keyword">let</span> params = []<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    params.<span class="hljs-title function_">push</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;obj[key]&#125;</span>`</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">encodeURIComponent</span>(params.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>))<br>&#125;<br></code></pre></td></tr></table></figure></li><li>修改URL中的参数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">replaceParamVal</span> = (<span class="hljs-params">paramName, replacewith</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> oUrl = location.<span class="hljs-property">href</span>.<span class="hljs-title function_">toString</span>()<br>  <span class="hljs-keyword">const</span> re = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;/ (&#x27;</span> + paramName + <span class="hljs-string">&#x27;=)([^&amp;]*)/gi&#x27;</span>)<br>  location.<span class="hljs-property">href</span> = oUrl.<span class="hljs-title function_">replace</span>(re, paramName + <span class="hljs-string">&#x27;=&#x27;</span> + replaceWith)<br>  <span class="hljs-keyword">return</span> location.<span class="hljs-property">href</span><br>&#125;;<br></code></pre></td></tr></table></figure></li></ol></li><li>设备判断<ol><li>判断移动端或是PC端<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">isMobile</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(iPhone|iPod|Android|ios|i0S|iPad|Backerry|WebOS|Symbian|Windows Phone|Phone)/i</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;mobile&#x27;</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;desktop&#x27;</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li>判断是否是苹果还是安卓移动设备<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">isAppleMobileDevice</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> reg = <span class="hljs-regexp">/iphone|ipod|ipad|Macintosh/i</span><br>  <span class="hljs-keyword">return</span> reg.<span class="hljs-title function_">test</span>(navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">toLowerCase</span>())<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>判断是否是安卓移动设备<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">isAndroidMobileDevice</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/android/i</span>.<span class="hljs-title function_">test</span>(navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">toLowerCase</span>())<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>判断系统是Windows还是Mac<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">osType</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> agent = navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">toLowerCase</span>();<br>  <span class="hljs-keyword">const</span> isMac = <span class="hljs-regexp">/macintosh|mac os x/i</span>.<span class="hljs-title function_">test</span>(navigator.<span class="hljs-property">userAgent</span>);<br>  <span class="hljs-keyword">const</span> isWindows =<br>    agent.<span class="hljs-title function_">index0f</span>(<span class="hljs-string">&quot;win64&quot;</span>) &gt;= <span class="hljs-number">0</span> ||<br>    agent.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;wow64&quot;</span>) &gt;= <span class="hljs-number">0</span> ||<br>    agent.<span class="hljs-title function_">index0f</span>(<span class="hljs-string">&quot;win32&quot;</span>) &gt;= <span class="hljs-number">0</span> ||<br>    agent.<span class="hljs-title function_">index0f</span>(<span class="hljs-string">&quot;wow32&quot;</span>) &gt;= <span class="hljs-number">0</span><br>  <span class="hljs-keyword">if</span> (isWindows) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;windows&quot;</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (isMac) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;mac&quot;</span><br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>判断是否是微信&#x2F;QQ内置浏览器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">broswer</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> ua = navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">toLowerCase</span>()<br>  <span class="hljs-keyword">if</span> (ua.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/MicroMessenger/i</span>) == <span class="hljs-string">&quot;micromessenger&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;weixin&quot;</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ua.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/QQ/i</span>) == <span class="hljs-string">&quot;qq&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;QQ&quot;</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>获取浏览器型号和版本<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getExplorerInfo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> t = navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">toLocaleLowerCase</span>()<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> &lt;= t.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;msie&#x27;</span>)<br>    ? &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;IE&#x27;</span>, <span class="hljs-attr">version</span>: <span class="hljs-title class_">Number</span>(t.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/msie ([\d]+)/</span>)[<span class="hljs-number">1</span>]) &#125;<br>    : !!t.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/trident\/.+?rv:(([\d.]+))/</span>)<br>    ? &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;IE&#x27;</span>, <span class="hljs-attr">version</span>: <span class="hljs-number">11</span> &#125;<br>    : <span class="hljs-number">0</span> &lt;= t.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;edge&#x27;</span>)<br>    ? &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;Edge&#x27;</span>, <span class="hljs-attr">version</span>: <span class="hljs-title class_">Number</span>(t.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/edge\/([\d]+)/</span>)[<span class="hljs-number">1</span>]) &#125;<br>    : <span class="hljs-number">0</span> &lt;= t.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;firefox&#x27;</span>)<br>    ? &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;Firefox&#x27;</span>, <span class="hljs-attr">version</span>: <span class="hljs-title class_">Number</span>(t.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/firefox\/([\d]+)/</span>)[<span class="hljs-number">1</span>]) &#125;<br>    : <span class="hljs-number">0</span> &lt;= t.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;chrome&#x27;</span>)<br>    ? &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;Firefox&#x27;</span>, <span class="hljs-attr">version</span>: <span class="hljs-title class_">Number</span>(t.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/chrome\/([\d]+)/</span>)[<span class="hljs-number">1</span>]) &#125;<br>    : <span class="hljs-number">0</span> &lt;= t.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;opera&#x27;</span>)<br>    ? &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;Opera&#x27;</span>, <span class="hljs-attr">version</span>: <span class="hljs-title class_">Number</span>(t.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/opera\/([\d]+)/</span>)[<span class="hljs-number">1</span>]) &#125;<br>    : <span class="hljs-number">0</span> &lt;= t.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;Safari&#x27;</span>)<br>    ? &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;Safari&#x27;</span>, <span class="hljs-attr">version</span>: <span class="hljs-title class_">Number</span>(t.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/Safari\/([\d]+)/</span>)[<span class="hljs-number">1</span>]) &#125;<br>    : &#123; <span class="hljs-attr">type</span>: t, <span class="hljs-attr">version</span>: -<span class="hljs-number">1</span> &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol></li><li>浏览器操作<ol><li>滚动到页面顶部<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">scrollToTop</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> height = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollTop</span>;<br>  <span class="hljs-keyword">if</span> (height &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(scrollToTop);<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">scrollTo</span>(<span class="hljs-number">0</span>, height - height / <span class="hljs-number">8</span>);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>滚动至底部<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">scrollToBottom</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">scrollTo</span>(<span class="hljs-number">0</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span>);<br></code></pre></td></tr></table></figure></li><li>滚动到指定元素区域<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">smoothScroll</span> = element =&gt; <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(element).<span class="hljs-title function_">scrollIntoView</span>(&#123; <span class="hljs-attr">behavior</span>: <span class="hljs-string">&#x27;smooth&#x27;</span> &#125;);<br></code></pre></td></tr></table></figure></li><li>获取可视窗口宽度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getPageViewWidth</span> = (<span class="hljs-params"></span>) =&gt; (<span class="hljs-variable language_">document</span>.<span class="hljs-property">compatMode</span> = <span class="hljs-string">&quot;BackCompat&quot;</span> ? <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>).<span class="hljs-property">clientWidth</span><br></code></pre></td></tr></table></figure></li><li>获取可视窗口高度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getClienHeight</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> clientHeight = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span> &amp;&amp; <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span>) &#123;<br>    clientHeight = (<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span> &lt; <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span>) ? <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span> : <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    clientHeight = (<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span> &gt; <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span>) ? <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span> : <span class="hljs-variable language_">document</span>,documentElement.<span class="hljs-property">clientHeight</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> clientHeight<br>&#125;<br></code></pre></td></tr></table></figure></li><li>打开浏览器全屏<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">toFullScreen</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span><br>  <span class="hljs-keyword">if</span> (element.<span class="hljs-property">requestFullscreen</span>) &#123;<br>    element.<span class="hljs-title function_">requestFul1screen</span>()<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.<span class="hljs-property">mozRequestFu11Screen</span>) &#123;<br>    element.<span class="hljs-title function_">mozRequestFul1Screen</span>()<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.<span class="hljs-property">msRequestFullscreen</span>) &#123;<br>    element.<span class="hljs-title function_">msRequestFul1screen</span>()<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.<span class="hljs-property">webkitRequestFullscreen</span>) &#123;<br>    element.<span class="hljs-title function_">webkitRequestFul1Screen</span>()<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol></li><li>时间操作<ol><li>获取当前时间<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">nowTime</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>  <span class="hljs-keyword">const</span> year = now.<span class="hljs-title function_">getFullYear</span>()<br>  <span class="hljs-keyword">const</span> month = now.<span class="hljs-title function_">getMonth</span>()<br>  <span class="hljs-keyword">const</span> date = now.<span class="hljs-title function_">getDate</span>() &gt;= <span class="hljs-number">10</span> ? now.<span class="hljs-title function_">getDate</span>() : <span class="hljs-string">&#x27;0&#x27;</span> + now.<span class="hljs-title function_">getDate</span>()<br>  <span class="hljs-keyword">const</span> hour = now.<span class="hljs-title function_">gethours</span>() &gt;= <span class="hljs-number">10</span> ? now.<span class="hljs-title function_">getHours</span>() : <span class="hljs-string">&#x27;0&#x27;</span> + now.<span class="hljs-title function_">gethours</span>()<br>  <span class="hljs-keyword">const</span> miu = now.<span class="hljs-title function_">getMinutes</span>() &gt;= <span class="hljs-number">10</span> ? now.<span class="hljs-property">getMinutes0</span> : <span class="hljs-string">&#x27;日&#x27;</span> + now.<span class="hljs-title function_">getMinutes</span>()<br>  <span class="hljs-keyword">const</span> sec = now.<span class="hljs-title function_">getSeconds</span>() &gt;= <span class="hljs-number">10</span> ? now.<span class="hljs-title function_">getSeconds</span>() : <span class="hljs-string">&#x27;0&#x27;</span> + now.<span class="hljs-title function_">getSeconds</span>()<br>  <span class="hljs-keyword">return</span> +year + <span class="hljs-string">&#x27;年&#x27;</span> + (month + <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;月&#x27;</span> + date + <span class="hljs-string">&#x27;日 &#x27;</span> + hour + <span class="hljs-string">&#x27;:&#x27;</span> + miu + <span class="hljs-string">&#x27;:&#x27;</span> + sec<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>格式化时间<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">dateFormater</span> = (<span class="hljs-params">formater, time</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> date = time ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>  Y = date.<span class="hljs-title function_">getFullYear</span>() + <span class="hljs-string">&#x27;&#x27;</span><br>  M = date.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span><br>  D = date.<span class="hljs-title function_">getDate</span>()<br>  H = date.<span class="hljs-title function_">getHours</span>()<br>  m = date.<span class="hljs-title function_">getMinutes</span>()<br>  s = date.<span class="hljs-title function_">getSeconds</span>()<br>  <span class="hljs-keyword">return</span> formater<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/YYYY||yyyy/g</span>, Y)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/YY|yy/g</span>, Y.<span class="hljs-title function_">substr</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/MM/g</span>, M &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span> + M)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/DD/g</span>, D &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span> + D)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/HH|hh/g</span>, (H &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>) + H)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/mm/g</span>, (m &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>) + s)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/ss/g</span>, (s &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span>) + s)<br>&#125;;<br><span class="hljs-comment">// dateFormater(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)</span><br><span class="hljs-comment">// dateFormater(&#x27;YYYYMMDDHHmmss&#x27;)</span><br></code></pre></td></tr></table></figure></li></ol></li><li>JavaScript操作<ol><li>阻止事件冒泡<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">stopPropagation</span> = e =&gt; &#123;<br>  e = e || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span><br>  e.<span class="hljs-property">stopPropagation</span> ? e.<span class="hljs-title function_">stopPropagation</span>() : e.<span class="hljs-property">cancelBubble</span> = <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>防抖函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">debounce</span> = (<span class="hljs-params">fn, wait</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> context = <span class="hljs-variable language_">this</span>,<br>      args = <span class="hljs-variable language_">arguments</span><br>    <span class="hljs-keyword">if</span> (timer) &#123;<br>      <span class="hljs-built_in">clearTimeout</span>(timer)<br>      timer = <span class="hljs-literal">null</span><br>    &#125;<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      fn.<span class="hljs-title function_">apply</span>(context, args)<br>    &#125;, wait)<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>节流函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">throttle</span> = (<span class="hljs-params">fn, delay</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> curTime = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> context = <span class="hljs-variable language_">this</span><br>      args = <span class="hljs-variable language_">arguments</span><br>      nowTime = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>    <span class="hljs-keyword">if</span> (nowTime - curTime &gt;= delay) &#123;<br>      curTime = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>      <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">apply</span>(context, args)<br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>数据类型判断<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getType</span> = (<span class="hljs-params">value</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (value === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> value + <span class="hljs-string">&#x27;&#x27;</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 判断数据是引用类型的情况</span><br>    <span class="hljs-keyword">let</span> valueClass = <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(value),<br>    type = valueClass.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    type.<span class="hljs-title function_">pop</span>()<br>    <span class="hljs-keyword">return</span> type.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">toLoweICase</span>()<br>  &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 判断数据是基本数据类型的情况和两数的情况</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> value<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>对象深拷贝<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">deepClone</span> = (<span class="hljs-params">obj, hash = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>()</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 日期对象直接返回一个新的日期对象</span><br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Date</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(obj)<br>  &#125;<br>  <span class="hljs-comment">// 正则对象直接返回一个新的正则对象</span><br>  <span class="hljs-keyword">if</span> (obi <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">ResExp</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(obj)<br>  &#125;<br>  <span class="hljs-comment">// 如果循环引用，就用 weakMap 来解决</span><br>  <span class="hljs-keyword">if</span> (hash.<span class="hljs-title function_">has</span>(obj)) &#123;<br>    <span class="hljs-keyword">return</span> hash.<span class="hljs-title function_">get</span>(obj)<br>  &#125;<br>  <span class="hljs-comment">// 获取对象所有自身屁性的描述</span><br>  <span class="hljs-keyword">let</span> allDesc = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(obi)<br>  <span class="hljs-comment">// 遍历传入参数所有键的特性</span><br>  <span class="hljs-keyword">let</span> cloneObj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(obj), allDesc)<br>  hash.<span class="hljs-title function_">set</span>(obj, cloneObj)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(obi)) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj[key] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj[key] !== <span class="hljs-literal">null</span>) &#123;<br>      cloneObj[key] = <span class="hljs-title function_">deepClone</span>(obj[key], hash)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      cloneObj[key] = obi[key]<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> cloneObj<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Vite中使用glob完成自动生成Router规则</title>
    <link href="/2022/03/04/%E5%9C%A8Vite%E4%B8%AD%E4%BD%BF%E7%94%A8glob%E5%AE%8C%E6%88%90%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90Router%E8%A7%84%E5%88%99/"/>
    <url>/2022/03/04/%E5%9C%A8Vite%E4%B8%AD%E4%BD%BF%E7%94%A8glob%E5%AE%8C%E6%88%90%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90Router%E8%A7%84%E5%88%99/</url>
    
    <content type="html"><![CDATA[<ul><li><p>&amp;#x20;我们在工作当中，其实会遇到很多的体力活，它没有什么技术含量，但你还不得不做，比方说像这个路由配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;index&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/index.vue&#x27;</span>),<br>    <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;首页&#x27;</span>, <span class="hljs-attr">menuOrder</span>: <span class="hljs-number">1</span> &#125;<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/about/index.vue&#x27;</span>),<br>    <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;关于&#x27;</span>, <span class="hljs-attr">menuOrder</span>: <span class="hljs-number">1</span> &#125;<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/contact/index.vue&#x27;</span>),<br>    <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;联系&#x27;</span>, <span class="hljs-attr">menuOrder</span>: <span class="hljs-number">1</span> &#125;<br>  &#125;,<br>]<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHashHistory</span>(),<br>  routes<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>有没感觉路由配置就是一个纯粹的体力活，但你又不得不干的体力活？</p></li><li><p>如果你的心思足够细腻，你还会感觉到这个玩意儿有点像重复代码，但是你又说不好哪里重复了。你的感觉是非常正确的，它就是重复代码，它跟谁重复了呢？跟我们的目录结构重复了。看看对比：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d3ec5ea89cb46cab09400aa7c0a4b3b~tplv-k3u1fbpfcp-watermark.image"></p></li><li><p>为什么要把它写一遍呢？</p></li><li><p>其实我们软件工程里边早就出现了一个概念，叫做：<code>约定大于配置</code>，就是在我们实际开发中，公司往往会给予很多的开发规范，在这些规范里边其实就已经暗含了配置了</p></li><li><p>比如about页面，需要建一个文件夹，它的页面组件是<code>/views/about/index.vue</code>，contact页面也同理。按照这样的规范去写出来的目录，它其实就是路由配置</p></li><li><p>那我现在要想一想了，既然如此啊，我们能不能找到一个办法，就是在代码里边自动帮我们生成路由配置，不用去手动写；</p></li><li><p>手动写的还经常写错，单词写错，大小写写错，然后呢，导入路径写错，增加了不少的错误几率，而且将来这个目录结构一改，如果说你这里忘记了更改，还要造成很多的隐患，那么如果说能够自动生成的话，这些问题都不复存在了，那怎么来做呢？</p></li><li><p>此时我想，能否对<code>/router/index.js</code>文件内定义的<code>routes</code>这个路由配置做文章？</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61dc2b6928294ffc90d3cbde9bff1120~tplv-k3u1fbpfcp-watermark.image"></p></li><li><p>参考小程序的做法，为每一个页面呢写上一个配置，用json或js都行，导出一个配置<code>meta</code>中缺失的配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>  <span class="hljs-attr">menuOrder</span>: <span class="hljs-number">1</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>同样的道理呢，我们把这个配置呢，应用到每一个页面，每一个页面带一个配置，换句话说，只要有这个配置，它就是一个页面，没有这个配置它就不是一个页面，</p></li><li><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/016be715fb8b4d089dabb6927bfd0470~tplv-k3u1fbpfcp-watermark.image"></p></li><li><p>这么配置后，当每次新建页面，把这个配置给它带上就完事了。这么一来，信息就完整了，我们就可以大胆的不再使用手动的书写方式了啊，为了避免报错呢，暂时的给<code>/router/index.js</code>文件内导出的<code>routes</code>配置为一个空数组，然后将<code>routes</code>自动生成</p></li><li><p>怎么生成？如果说你用的是<code>vue-cli</code>，由于它背后使用了<code>Webpack</code>，那么你可以利用里边的**<code>require.context()</code>**来进行批量导入，用它可以把<code>views</code>文件夹下边的所有你需要的文件都一起导入进来，比方说你要找到它里边的所有<code>page.js</code>可以全部导入进来。</p></li><li><p>由于我这里用的是<code>viet</code>，它背后不是<code>Webpack</code>，上述方法用不了。在<strong>vite</strong>里边呢，它也有相同的方式来做同样的事情，这种方式呢，叫做<a href="https://cn.vitejs.dev/guide/migration-from-v2.html#importmetaglob" title="glob">glob</a>；</p></li><li><p>通过查看官方文档发现，这是一个函数，给它传入一个匹配规则，它就能找到这个文件夹下边的所有的相应文件，把这些文件导入进来，生成一个模块的集合。</p></li><li><p>比方说我要匹配不<code>views</code>文件夹下边的所有的<code>page.js</code>的文件，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pageModules = <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-title function_">glob</span>(<span class="hljs-string">&#x27;../views/**/page.js&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pageModules)<br></code></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ae32fc1605647b5a49260000f63c945~tplv-k3u1fbpfcp-watermark.image"></p></li><li><p>观察打印结果发现，对象的属性名是对应的路径，值为动态导入函数，这些就是我们想要的配置啊</p></li><li><p>如果你希望对象的值不是动态导入的函数，官方文档上有一个<code>globEager</code>方法</p><pre><code class="hljs">  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pageModules = <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-title function_">globEager</span>(<span class="hljs-string">&#x27;../views/**/page.js&#x27;</span>)<br></code></pre></td></tr></table></figure></code></pre></li><li><p>在或者你指向要这个模块集合里的<code>ddefault</code>对象，那就稍微有点复杂了，不过，抱着死磕到底的心态，绝对尝试下，结果真给我搞出来了。下面是具体实现代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pages = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(pageModules).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">[path, pageModule]</span>) =&gt;</span> [path, pageModule.<span class="hljs-property">default</span> || &#123;&#125;]))<br></code></pre></td></tr></table></figure></li><li><p>首先，我们使用<code>Object.entries</code>将模块对象<code>pageModules</code>转换为一个键值对数组，其中每个键值对都包含模块路径作为键和模块对象作为值。</p></li><li><p>接下来，我们使用<code>map</code>方法对这个数组进行遍历，对于每个键值对，我们都将其转换为一个包含模块路径作为键和模块对象<code>default</code>属性值作为值的键值对数组。这里使用了解构语法将<code>path</code>和<code>pageModule</code>分别指定为数组项的第一个和第二个元素，然后使用数组字面量的方式返回一个包含<code>path</code>和<code>pageModule.default</code>的新数组。</p></li><li><p>最后，我们使用<code>Object.fromEntries</code>将新数组转换为一个对象字面量，其中每个键值对都由原来的模块路径和<code>default</code>属性值组成。由于一些模块可能没有<code>default</code>属性值，所以我们使用<code>|| &#123;&#125;</code>语法将其设置为空对象，以防止在后续操作中出现<code>undefined</code>值的情况。</p></li><li><p>这样就处理好了我想要的数据，打印出来看下：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81a83e9526ff4fe886f32458ee87af95~tplv-k3u1fbpfcp-watermark.image"></p></li><li><p>再来观察下这个对象，有3个对应的路径的属性和模块内容，说明我们应该有三个对应的路由配置。</p></li><li><p>这里通过 <code>Object.entries()</code> 方法将<code>pages</code>转为数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> routes = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(pages)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66c1963fef2f40bbaddb7b718438838b~tplv-k3u1fbpfcp-watermark.image"></p></li><li><p>接下来需要通过数组的<code>map</code>方法，将数组内的每一项，映射成路由配置，每一次映射，都要返回一个路由配置，比如下面这个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">return</span> &#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/index.vue&#x27;</span>),<br>  <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Home&#x27;</span>, <span class="hljs-attr">menuOrder</span>: <span class="hljs-number">1</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>先找简单的，观察通过数组内的成员，<code>config</code>这个配置对应的就是<code>meta</code>对象，替换即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">return</span> &#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/index.vue&#x27;</span>),<br>  <span class="hljs-attr">meta</span>: config<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0150d2620ae349bd8a21026a2ccc15cf~tplv-k3u1fbpfcp-watermark.image"></p></li><li><p>接下来是路径，要把<code>../views/about.page.js</code>这个数组成员截取头尾，只留下<code>/about</code>，路径就出来了，首页的路径需要做点出来，以下是实现代码：</p></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> routes = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(pages).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">[pagePath, config]</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> path = (pagePath.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;../views&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;/page.js&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) || <span class="hljs-string">&#x27;/&#x27;</span>)<br>  <span class="hljs-keyword">return</span> &#123;<br>    path,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/index.vue&#x27;</span>),<br>    <span class="hljs-attr">meta</span>: config  <span class="hljs-comment">// config 就是 meta 的值，直接就能用</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a18ba7e7acef4255a401a763f9ff5525~tplv-k3u1fbpfcp-watermark.image"></p></li><li><p>然后是路由<strong>name</strong>，具体看公司规定了，这里就简单点吧，比如<code>/about</code>，就将其命名为<code>about</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> routes = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(pages).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">[pagePath, config]</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> path = (pagePath.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;../views&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;/page.js&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) || <span class="hljs-string">&#x27;/&#x27;</span>)<br>  <span class="hljs-keyword">const</span> name = path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-title class_">Boolean</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;-&#x27;</span>) || <span class="hljs-string">&#x27;home&#x27;</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    path,<br>    name,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/index.vue&#x27;</span>),<br>    <span class="hljs-attr">meta</span>: config<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>看效果：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6808340f95984d0287c33368d2dc5221~tplv-k3u1fbpfcp-watermark.image"></p></li><li><p>最后是<code>component</code>，数组对象内貌似有这个玩意，想这直接用 <code>replace</code>方法替换，结果运行时编辑器终端报错。。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> routes = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(pages).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">[pagePath, config]</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> path = (pagePath.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;../views&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;/page.js&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) || <span class="hljs-string">&#x27;/&#x27;</span>)<br>  <span class="hljs-keyword">const</span> name = path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-title class_">Boolean</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;-&#x27;</span>) || <span class="hljs-string">&#x27;home&#x27;</span><br>  <span class="hljs-keyword">const</span> compPath = pagePath.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;page.js&#x27;</span>, <span class="hljs-string">&#x27;index.vue&#x27;</span>)<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">path</span>: path,<br>    name,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(compPath),<br>    <span class="hljs-attr">meta</span>: config<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05a6397075834d0fb249dac7f90087ec~tplv-k3u1fbpfcp-watermark.image"><br><code>component</code>对应的属性值变成了经过<code>vite</code>转换后的字面量，这不是我们想要的。<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/982eb55c5ab74493920c0940567fea06~tplv-k3u1fbpfcp-watermark.image"></p></li><li><p>查阅资料后发现，因为<code>vite</code>是用<code>rollup</code>进行打包的，在这种环境内打包，有一个要求，就是<code>import</code>内不能放变量，要放字面量，不然会影响到其的静态分析。</p></li><li><p>这里想到在导入页面模块的时候，再去导入组件的模块，在<code>import</code>里就有我们想要的字面量了，这下就简单了，只需去取组件模块内的import字面量，替换到<code>map</code>方法内，就行了。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6eb8d744f014e44882c0051e0f9c7bd~tplv-k3u1fbpfcp-watermark.image"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> routes = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(pages).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">[pagePath, config]</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> path = (pagePath.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;../views&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;/page.js&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) || <span class="hljs-string">&#x27;/&#x27;</span>)<br>  <span class="hljs-keyword">const</span> name = path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-title class_">Boolean</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;-&#x27;</span>) || <span class="hljs-string">&#x27;home&#x27;</span><br>  <span class="hljs-keyword">const</span> compPath = pagePath.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;page.js&#x27;</span>, <span class="hljs-string">&#x27;index.vue&#x27;</span>)<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">path</span>: path,<br>    name,<br>    <span class="hljs-attr">component</span>: compModules[compPath],<br>    <span class="hljs-attr">meta</span>: config<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>再来看下数据结构：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97b718db6dc245a5bf3c7a6fc756c304~tplv-k3u1fbpfcp-watermark.image"></p></li><li><p>最后，把先去为防止报错而赋值成空数组的routes去掉，大功告成了，附上<code>/router/index.js</code>文件完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-comment">// const routes = [</span><br><span class="hljs-comment">//   &#123;</span><br><span class="hljs-comment">//     path: &#x27;/&#x27;,</span><br><span class="hljs-comment">//     name: &#x27;home&#x27;,</span><br><span class="hljs-comment">//     component: () =&gt; import(&#x27;../views/index.vue&#x27;),</span><br><span class="hljs-comment">//     meta: &#123; title: &#x27;Home&#x27;, menuOrder: 1 &#125;</span><br><span class="hljs-comment">//   &#125;,</span><br><span class="hljs-comment">//   &#123;</span><br><span class="hljs-comment">//     path: &#x27;/about&#x27;,</span><br><span class="hljs-comment">//     name: &#x27;about&#x27;,</span><br><span class="hljs-comment">//     component: () =&gt; import(&#x27;../views/about/index.vue&#x27;),</span><br><span class="hljs-comment">//     meta: &#123; title: &#x27;about&#x27;, menuOrder: 10 &#125;</span><br><span class="hljs-comment">//   &#125;,</span><br><span class="hljs-comment">//   &#123;</span><br><span class="hljs-comment">//     path: &#x27;/contact&#x27;,</span><br><span class="hljs-comment">//     name: &#x27;contact&#x27;,</span><br><span class="hljs-comment">//     component: () =&gt; import(&#x27;../views/contact/index.vue&#x27;),</span><br><span class="hljs-comment">//     meta: &#123; title: &#x27;contact&#x27;, menuOrder: 100 &#125;</span><br><span class="hljs-comment">//   &#125;,</span><br><span class="hljs-comment">// ]</span><br><br><span class="hljs-keyword">const</span> pageModules = <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-title function_">globEager</span>(<span class="hljs-string">&#x27;../views/**/page.js&#x27;</span>)<br><span class="hljs-keyword">const</span> pages = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(pageModules).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">[path, pageModule]</span>) =&gt;</span> [path, pageModule.<span class="hljs-property">default</span> || &#123;&#125;]))<br><span class="hljs-keyword">const</span> compModules = <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-title function_">glob</span>(<span class="hljs-string">&#x27;../views/**/index.vue&#x27;</span>)<br><span class="hljs-keyword">const</span> routes = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(pages).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">[pagePath, config]</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> path = (pagePath.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;../views&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;/page.js&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) || <span class="hljs-string">&#x27;/&#x27;</span>)<br>  <span class="hljs-keyword">const</span> name = path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-title class_">Boolean</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;-&#x27;</span>) || <span class="hljs-string">&#x27;home&#x27;</span><br>  <span class="hljs-keyword">const</span> compPath = pagePath.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;page.js&#x27;</span>, <span class="hljs-string">&#x27;index.vue&#x27;</span>)<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">path</span>: path,<br>    name,<br>    <span class="hljs-attr">component</span>: compModules[compPath],<br>    <span class="hljs-attr">meta</span>: config<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHashHistory</span>(),<br>  routes<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>页面效果：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ae68228eaf74a35ae46dad70daebdf7~tplv-k3u1fbpfcp-watermark.image"></p></li><li><p>App.vue完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; watchEffect, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; router &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">const</span> routes = <span class="hljs-title function_">ref</span>(router.<span class="hljs-title function_">getRoutes</span>())<br><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> (routes.<span class="hljs-property">value</span> = router.<span class="hljs-property">getRoutes</span>))<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onUpdated</span> = (<span class="hljs-params"></span>) =&gt; (routes.<span class="hljs-property">value</span> = router.<span class="hljs-title function_">getRoutes</span>())<br>router.<span class="hljs-title function_">afterEach</span>(onUpdated)<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;route in routes&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;route.path&quot;</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;route.path&quot;</span>&gt;</span>&#123;&#123; route.meta.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-id">#app</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">font-family</span>: Avenir, Helvetica, Arial, sans-serif;</span></span><br><span class="language-css"><span class="language-xml">  -webkit-<span class="hljs-attribute">font-smoothing</span>: antialiased;</span></span><br><span class="language-css"><span class="language-xml">  -moz-osx-<span class="hljs-attribute">font-smoothing</span>: grayscale;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#2c3e50</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">60px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">nav</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">nav</span> &gt; <span class="hljs-selector-tag">a</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">text-decoration</span>: none;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure></li><li><p>在此基础上，如果需要新增页面的时候，只需在<code>views</code>文件夹加内新建对应的页面文件并带上<code>page.js</code>配置文件，就可不用再手动配置路由了。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b25fc5401f7c414e88ac5f4b9d221d08~tplv-k3u1fbpfcp-watermark.image?" style="zoom:150%;" /></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习TypeScript 6 (类型断言 - 联合类型 - 交叉类型)</title>
    <link href="/2022/02/24/%E5%AD%A6%E4%B9%A0TypeScript%206%20(%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%20-%20%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%20-%20%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B)/"/>
    <url>/2022/02/24/%E5%AD%A6%E4%B9%A0TypeScript%206%20(%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%20-%20%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%20-%20%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B)/</url>
    
    <content type="html"><![CDATA[<h1 id="类型断言-联合类型-交叉类型"><a href="#类型断言-联合类型-交叉类型" class="headerlink" title="类型断言 | 联合类型 | 交叉类型"></a>类型断言 | 联合类型 | 交叉类型</h1><h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 例如我们的手机号通常是 13XXXXXXX 为数字类型 这时候产品说需要支持座机</span><br><span class="hljs-comment">// 所以我们就可以使用联合类型支持座机字符串</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">myPhone</span>: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>  = <span class="hljs-string">&#x27;010-820&#x27;</span><br><br><span class="hljs-comment">// 这样写是会报错，因为我们的联合类型只有数字和字符串并没有布尔值</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">myPhone</span>: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>  = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li>函数使用联合类型：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> fn = (<span class="hljs-attr">something</span>:<span class="hljs-built_in">number</span> | <span class="hljs-built_in">boolean</span>):<span class="hljs-function"><span class="hljs-params">boolean</span> =&gt;</span> &#123;<br>     <span class="hljs-keyword">return</span> !!something<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h4><ul><li>多种类型的集合，联合对象将具有所有类型的所有成员<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">People</span> &#123;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>,<br>  height： <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Man</span>&#123;<br>  <span class="hljs-attr">sex</span>: <span class="hljs-built_in">string</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">peopleObj</span> = (<span class="hljs-params">man: People &amp; Man</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(man.<span class="hljs-property">age</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(man.<span class="hljs-property">height</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(man.<span class="hljs-property">sex</span>)<br>&#125;<br><br><span class="hljs-title function_">peopleObj</span>(&#123;<span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<span class="hljs-attr">height</span>: <span class="hljs-number">180</span>,<span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><blockquote><p>语法： 值 as 类型； 或 &lt;类型&gt;值 value as string &lt;string&gt;value</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> A &#123;<br>       <span class="hljs-attr">run</span>: <span class="hljs-built_in">string</span><br>&#125;<br> <br><span class="hljs-keyword">interface</span> B &#123;<br>       <span class="hljs-attr">build</span>: <span class="hljs-built_in">string</span><br>&#125;<br> <br><span class="hljs-keyword">const</span> fn = (<span class="hljs-attr">type</span>: A | B): <span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">type</span>.<span class="hljs-property">run</span><br>&#125;<br><span class="hljs-comment">// 这样写是有警告的应为B的接口上面是没有定义run这个属性的</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> A &#123;<br>       <span class="hljs-attr">run</span>: <span class="hljs-built_in">string</span><br>&#125;<br> <br><span class="hljs-keyword">interface</span> B &#123;<br>       <span class="hljs-attr">build</span>: <span class="hljs-built_in">string</span><br>&#125;<br> <br><span class="hljs-keyword">const</span> fn = (<span class="hljs-attr">type</span>: A | B): <span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span> &#123;<br>       <span class="hljs-keyword">return</span> (<span class="hljs-keyword">type</span> <span class="hljs-keyword">as</span> A).<span class="hljs-property">run</span><br>&#125;<br><span class="hljs-comment">// 可以使用类型断言来推断他传入的是A接口的值</span><br></code></pre></td></tr></table></figure><blockquote><p>📌需要注意的是：类型断言只能够「欺骗」TypeScript 编译器，无法避免运行时的错误，反而滥用类型断言可能会导致运行时错误：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">abc</span> = <span class="hljs-number">123</span><br><span class="hljs-comment">//这样写会报错因为window没有abc这个东西</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript">(<span class="hljs-variable language_">window</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>).<span class="hljs-property">abc</span> = <span class="hljs-number">123</span><br><span class="hljs-comment">// 可以使用 any 临时断言在 any 类型的变量上，访问任何属性都是允许的。</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="as-const"><a href="#as-const" class="headerlink" title="as const"></a>as const</h4><ul><li>是对字面量的<strong>断言</strong>，与const直接定义常量是有区别的</li><li>如果是普通类型跟直接const声明是一样的<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> names = <span class="hljs-string">&#x27;wesson&#x27;</span><br>names = <span class="hljs-string">&#x27;aa&#x27;</span>  <span class="hljs-comment">// 无法修改</span><br><br><span class="hljs-keyword">let</span> names2 = <span class="hljs-string">&#x27;wesson&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span><br>names2 = <span class="hljs-string">&#x27;aa&#x27;</span> <span class="hljs-comment">// 无法修改</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 数组</span><br><span class="hljs-keyword">let</span> a1 = [ <span class="hljs-number">10</span>, <span class="hljs-number">20</span> ] <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span><br><span class="hljs-keyword">const</span> a2 = [ <span class="hljs-number">10</span>, <span class="hljs-number">20</span> ]<br> <br>a1.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">30</span>); <span class="hljs-comment">// 错误，此时已经断言字面量为[10, 20],数据无法做任何修改</span><br>a2.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">30</span>); <span class="hljs-comment">// 通过，没有修改指针</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="类型断言是不具影响力的"><a href="#类型断言是不具影响力的" class="headerlink" title="类型断言是不具影响力的"></a>类型断言是不具影响力的</h4><ul><li>在下面的例子中，将 something 断言为 boolean 虽然可以通过编译，但是并没有什么用 并不会影响结果, 因为编译过程中会删除类型断言<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">toBoolean</span>(<span class="hljs-params">something: <span class="hljs-built_in">any</span></span>): <span class="hljs-built_in">boolean</span> &#123;<br>  <span class="hljs-keyword">return</span> something <span class="hljs-keyword">as</span> <span class="hljs-built_in">boolean</span>;<br>&#125;<br><span class="hljs-title function_">toBoolean</span>(<span class="hljs-number">1</span>);<br><span class="hljs-comment">// 返回值为 1</span><br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习TypeScript 5 (函数扩展)</title>
    <link href="/2022/02/24/%E5%AD%A6%E4%B9%A0TypeScript%205%20(%E5%87%BD%E6%95%B0%E6%89%A9%E5%B1%95)/"/>
    <url>/2022/02/24/%E5%AD%A6%E4%B9%A0TypeScript%205%20(%E5%87%BD%E6%95%B0%E6%89%A9%E5%B1%95)/</url>
    
    <content type="html"><![CDATA[<h1 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h1><h4 id="函数的类型"><a href="#函数的类型" class="headerlink" title="函数的类型"></a>函数的类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 注意，参数不能多传，也不能少传 必须按照约定的类型来</span><br><span class="hljs-keyword">const</span> fn = (<span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span>): <span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> name + age<br>&#125;<br><span class="hljs-title function_">fn</span>(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">18</span>)<br></code></pre></td></tr></table></figure><ul><li>函数的可选参数<code>?</code><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 通过 ? 表示该参数为可选参数</span><br><span class="hljs-keyword">const</span> fn = (<span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>, age?:<span class="hljs-built_in">number</span>): <span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> name + age<br>&#125;<br><span class="hljs-title function_">fn</span>(<span class="hljs-string">&#x27;张三&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li>函数参数的默认值<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> fn = (<span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;我是默认值&quot;</span>): <span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> name<br>&#125;<br><span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure></li><li>接口定义函数<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 定义参数 num 和 num2  ：后面定义返回值的类型</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Add</span> &#123;<br>    (<span class="hljs-attr">num</span>:  <span class="hljs-built_in">number</span>, <span class="hljs-attr">num2</span>: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">number</span><br>&#125;<br> <br><span class="hljs-keyword">const</span> <span class="hljs-attr">fn</span>: <span class="hljs-title class_">Add</span> = (<span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">num2</span>: <span class="hljs-built_in">number</span>): <span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> num + num2<br>&#125;<br><span class="hljs-title function_">fn</span>(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>)<br> <br> <br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">User</span>&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUserInfo</span>(<span class="hljs-params">user: User</span>): <span class="hljs-title class_">User</span> &#123;<br>  <span class="hljs-keyword">return</span> user<br>&#125;<br></code></pre></td></tr></table></figure></li><li>定义剩余参数<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> fn = (<span class="hljs-attr">array</span>:<span class="hljs-built_in">number</span>[],...<span class="hljs-attr">items</span>:<span class="hljs-built_in">any</span>[]):<span class="hljs-built_in">any</span>[] =&gt; &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array,items)<br>       <span class="hljs-keyword">return</span> items<br>&#125;<br> <br><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>:<span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br> <br><span class="hljs-title function_">fn</span>(a,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li>函数重载<ul><li>重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。</li><li>如果参数类型不同，则参数类型应设置为 <strong>any</strong>。</li><li>参数数量不同你可以将不同的参数设置为可选。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">params: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">void</span><br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">params: <span class="hljs-built_in">string</span>, params2: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">void</span><br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">params: <span class="hljs-built_in">any</span>, params2?: <span class="hljs-built_in">any</span></span>): <span class="hljs-built_in">void</span> &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(params)<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(params2)<br>&#125;<br><br><span class="hljs-title function_">fn</span>(<span class="hljs-number">123</span>)<br> <br><span class="hljs-title function_">fn</span>(<span class="hljs-string">&#x27;123&#x27;</span>,<span class="hljs-number">456</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习TypeScript 4 (数组类型)</title>
    <link href="/2022/02/24/%E5%AD%A6%E4%B9%A0TypeScript%204%20(%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B)/"/>
    <url>/2022/02/24/%E5%AD%A6%E4%B9%A0TypeScript%204%20(%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B)/</url>
    
    <content type="html"><![CDATA[<h1 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h1><h4 id="数组的类型"><a href="#数组的类型" class="headerlink" title="数组的类型"></a>数组的类型</h4><ul><li>类型[]<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 类型加中括号</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>: <span class="hljs-built_in">number</span>[] = [ <span class="hljs-number">123</span> ]<br><span class="hljs-comment">// 这样会报错定义了数字类型出现字符串是不允许的</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>:<span class="hljs-built_in">number</span>[] = [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;1&#x27;</span> ]<br><span class="hljs-comment">// 操作方法添加也是不允许的</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>:<span class="hljs-built_in">number</span>[] = [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ]<br><span class="hljs-comment">// 编辑器报错</span><br>arr.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br> <br><span class="hljs-keyword">var</span> <span class="hljs-attr">arr</span>: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];    <span class="hljs-comment">// 数字类型的数组</span><br><span class="hljs-keyword">var</span> <span class="hljs-attr">arr2</span>: <span class="hljs-built_in">string</span>[] = [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>];  <span class="hljs-comment">// 字符串类型的数组</span><br><span class="hljs-keyword">var</span> <span class="hljs-attr">arr3</span>: <span class="hljs-built_in">any</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-literal">true</span>]; <span class="hljs-comment">// 任意类型的数组</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="数组泛型"><a href="#数组泛型" class="headerlink" title="数组泛型"></a>数组泛型</h4><ul><li>规则： Array&lt;类型&gt;<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>:<span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> ]<br></code></pre></td></tr></table></figure></li></ul><h4 id="用接口表示数组"><a href="#用接口表示数组" class="headerlink" title="用接口表示数组"></a>用接口表示数组</h4><ul><li>一般用来描述类数组<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">NumberArray</span> &#123;<br>  [<span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span>]: <span class="hljs-built_in">number</span><br>&#125;<br><span class="hljs-comment">// 表示只要索引的类型是数字时，那么值的类型必须是数字。</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">fibonacci</span>: <span class="hljs-title class_">NumberArray</span> = [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span> ]<br></code></pre></td></tr></table></figure></li></ul><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">data</span>:<span class="hljs-built_in">number</span>[][] = [[ <span class="hljs-number">1</span>, <span class="hljs-number">2</span> ], [ <span class="hljs-number">3</span>, <span class="hljs-number">4</span> ]]<br></code></pre></td></tr></table></figure><h4 id="arguments类数组"><a href="#arguments类数组" class="headerlink" title="arguments类数组"></a>arguments类数组</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Arr</span>(<span class="hljs-params">...args:<span class="hljs-built_in">any</span></span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>)<br>    <span class="hljs-comment">// 错误的arguments 是类数组不能这样定义</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>:<span class="hljs-built_in">number</span>[] = <span class="hljs-variable language_">arguments</span><br>&#125;<br><span class="hljs-title class_">Arr</span>(<span class="hljs-number">111</span>, <span class="hljs-number">222</span>, <span class="hljs-number">333</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Arr</span>(<span class="hljs-params">...args:<span class="hljs-built_in">any</span></span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>) <br>    <span class="hljs-comment">// ts内置对象IArguments 定义</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>:<span class="hljs-title class_">IArguments</span> = <span class="hljs-variable language_">arguments</span><br>&#125;<br><br><span class="hljs-title class_">Arr</span>(<span class="hljs-number">111</span>, <span class="hljs-number">222</span>, <span class="hljs-number">333</span>)<br> <br><span class="hljs-comment">// 其中 IArguments 是 TypeScript 中定义好了的类型，它实际上就是：</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IArguments</span> &#123;<br>  [<span class="hljs-attr">index</span>: <span class="hljs-built_in">number</span>]: <span class="hljs-built_in">any</span>;<br>  <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">callee</span>: <span class="hljs-title class_">Function</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="any-在数组中的应用"><a href="#any-在数组中的应用" class="headerlink" title="any 在数组中的应用"></a>any 在数组中的应用</h4><ul><li>一个常见的例子数组中可以存在任意类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">list</span>: <span class="hljs-built_in">any</span>[] = [<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-number">1</span>, [],&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;]<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习TypeScript 3 (接口和对象类型)</title>
    <link href="/2022/02/24/%E5%AD%A6%E4%B9%A0TypeScript%203%20(%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B)/"/>
    <url>/2022/02/24/%E5%AD%A6%E4%B9%A0TypeScript%203%20(%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B)/</url>
    
    <content type="html"><![CDATA[<h1 id="接口和对象类型"><a href="#接口和对象类型" class="headerlink" title="接口和对象类型"></a>接口和对象类型</h1><h3 id="对象的类型"><a href="#对象的类型" class="headerlink" title="对象的类型"></a>对象的类型</h3><ul><li>在<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&q=typescript" title="typescript">typescript</a>中，我们定义对象的方式要用关键字<strong>interface</strong>（接口），我的理解是使用<strong>interface</strong>来定义一种约束，让数据的结构满足约束的格式。定义方式如下：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 这样写是会报错的 因为我们在person定义了a，b但是对象里面缺少b属性</span><br><span class="hljs-comment"> * 使用接口约束的时候不能多一个属性也不能少一个属性</span><br><span class="hljs-comment"> * 必须与接口保持一致</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-attr">b</span>:<span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">a</span>:<span class="hljs-built_in">string</span><br>&#125;<br> <br><span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>:<span class="hljs-title class_">Person</span>  = &#123;<br>    <span class="hljs-attr">a</span>:<span class="hljs-string">&quot;213&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 重名 interface 可以合并</span><br><span class="hljs-keyword">interface</span> A &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>&#125;<br><span class="hljs-keyword">interface</span> A &#123;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-attr">x</span>:A = &#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xx&#x27;</span>,<br>  <span class="hljs-attr">age</span>:<span class="hljs-number">20</span><br>&#125;<br><br><span class="hljs-comment">// 继承</span><br><span class="hljs-keyword">interface</span> A&#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span><br>&#125;<br> <br><span class="hljs-keyword">interface</span> B <span class="hljs-keyword">extends</span> A&#123;<br>  <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span><br>&#125;<br> <br><span class="hljs-keyword">let</span> <span class="hljs-attr">obj</span>:B = &#123;<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;string&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="可选属性-使用-操作符"><a href="#可选属性-使用-操作符" class="headerlink" title="可选属性 使用?操作符"></a>可选属性 使用<code>?</code>操作符</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 可选属性的含义是该属性可以不存在</span><br><span class="hljs-comment">// 所以说这样写也是没问题的</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>    b?: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">a</span>: <span class="hljs-built_in">string</span><br>&#125;<br> <br><span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>:<span class="hljs-title class_">Person</span>  = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-string">&quot;213&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="任意属性-propName-string"><a href="#任意属性-propName-string" class="headerlink" title="任意属性 [propName: string]"></a>任意属性 [propName: string]</h3><ul><li>需要注意的是，<strong>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 在这个例子当中我们看到接口中并没有定义C但是并没有报错</span><br><span class="hljs-comment">// 因为我们定义了[propName: string]: any;</span><br><span class="hljs-comment">// 允许添加新的任意属性</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>    b?:<span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">a</span>:<span class="hljs-built_in">string</span>,<br>    [<span class="hljs-attr">propName</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>;<br>&#125;<br> <br><span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>:<span class="hljs-title class_">Person</span>  = &#123;<br>    <span class="hljs-attr">a</span>:<span class="hljs-string">&quot;213&quot;</span>,<br>    <span class="hljs-attr">c</span>:<span class="hljs-string">&quot;123&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="只读属性-readonly"><a href="#只读属性-readonly" class="headerlink" title="只读属性 readonly"></a>只读属性 readonly</h3><ul><li>readonly 只读属性是不允许被赋值的只能读取<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 这样写是会报错的</span><br><span class="hljs-comment">// 应为a是只读的不允许重新赋值</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>    b?: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-keyword">readonly</span> <span class="hljs-attr">a</span>: <span class="hljs-built_in">string</span>,<br>    [<span class="hljs-attr">propName</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span> = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-string">&quot;213&quot;</span>,<br>    <span class="hljs-attr">c</span>: <span class="hljs-string">&quot;123&quot;</span><br>&#125;<br><br>person.<span class="hljs-property">a</span> = <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="添加函数"><a href="#添加函数" class="headerlink" title="添加函数"></a>添加函数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>    b?: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-keyword">readonly</span> <span class="hljs-attr">a</span>: <span class="hljs-built_in">string</span>,<br>    [<span class="hljs-attr">propName</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>;<br>    <span class="hljs-attr">cb</span>:<span class="hljs-function">()=&gt;</span><span class="hljs-built_in">void</span><br>&#125;<br> <br><span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span> = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-string">&quot;213&quot;</span>,<br>    <span class="hljs-attr">c</span>: <span class="hljs-string">&quot;123&quot;</span>,<br>    <span class="hljs-attr">cb</span>:<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习TypeScript 2 (任意类型)</title>
    <link href="/2022/02/24/%E5%AD%A6%E4%B9%A0TypeScript%202%20(%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8B)/"/>
    <url>/2022/02/24/%E5%AD%A6%E4%B9%A0TypeScript%202%20(%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8B)/</url>
    
    <content type="html"><![CDATA[<h1 id="任意类型"><a href="#任意类型" class="headerlink" title="任意类型"></a>任意类型</h1><h3 id="Any-类型-和-unknown-顶级类型"><a href="#Any-类型-和-unknown-顶级类型" class="headerlink" title="Any 类型 和 unknown 顶级类型"></a>Any 类型 和 unknown 顶级类型</h3><ul><li>开始前推荐安装下node的插件：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i @<span class="hljs-built_in">type</span>/node --save-devn<br><span class="hljs-comment"># node环境支持的依赖</span><br>npm i ts-node --g<br></code></pre></td></tr></table></figure></li></ul><ol><li>没有强制限定哪种类型，随时切换类型都可以 我们可以对 any 进行任何操作，不需要检查类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">anys</span>: <span class="hljs-built_in">any</span> = <span class="hljs-number">123</span><br>anys = <span class="hljs-string">&#x27;123&#x27;</span><br>anys = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li>声明变量的时候没有指定任意类型默认为<code>any</code><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> anys;<br>anys = <span class="hljs-string">&#x27;123&#x27;</span><br>anys = <span class="hljs-literal">true</span><br><br></code></pre></td></tr></table></figure><blockquote><p>如果使用<code>any</code>就失去了TypeScript类型检测的作用</p></blockquote></li><li>TypeScript 3.0 引入了 unknown 类型，也被认为是<code>top type</code>，但它更安全；与<code>any</code>一样，所有类型都可以分配给 unknown<ul><li>unknow类型比any更加严格当你要使用any 的时候可以尝试使用unknow<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// unknown 可以定义任何类型的值</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">value</span>: <span class="hljs-built_in">unknown</span>;<br> <br>value = <span class="hljs-literal">true</span>;             <span class="hljs-comment">// OK</span><br>value = <span class="hljs-number">42</span>;               <span class="hljs-comment">// OK</span><br>value = <span class="hljs-string">&quot;Hello World&quot;</span>;    <span class="hljs-comment">// OK</span><br>value = [];               <span class="hljs-comment">// OK</span><br>value = &#123;&#125;;               <span class="hljs-comment">// OK</span><br>value = <span class="hljs-literal">null</span>;             <span class="hljs-comment">// OK</span><br>value = <span class="hljs-literal">undefined</span>;        <span class="hljs-comment">// OK</span><br>value = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;type&quot;</span>);   <span class="hljs-comment">// OK</span><br> <br><span class="hljs-comment">// 这样写会报错 unknow 类型不能作为子类型只能作为父类型</span><br><span class="hljs-comment">// any 可以作为父类型和子类型</span><br><span class="hljs-comment">// unknown 类型不能赋值给其他类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">names</span>:<span class="hljs-built_in">unknown</span> = <span class="hljs-string">&#x27;123&#x27;</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">names2</span>:<span class="hljs-built_in">string</span> = names<br> <br><span class="hljs-comment">// 这样就没问题 any 类型是可以的</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">names</span>:<span class="hljs-built_in">any</span> = <span class="hljs-string">&#x27;123&#x27;</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">names2</span>:<span class="hljs-built_in">string</span> = names   <br> <br><span class="hljs-comment">// unknown 可赋值对象只有unknown 和 any</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">bbb</span>:<span class="hljs-built_in">unknown</span> = <span class="hljs-string">&#x27;123&#x27;</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">aaa</span>:<span class="hljs-built_in">any</span>= <span class="hljs-string">&#x27;456&#x27;</span><br><br>aaa = bbb<br></code></pre></td></tr></table></figure></li><li>区别2<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 如果是 any 类型在对象没有这个属性的时候还在获取是不会报错的</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">obj</span>: <span class="hljs-built_in">any</span> = &#123;<span class="hljs-attr">b</span>:<span class="hljs-number">1</span>&#125;<br>obj.<span class="hljs-property">a</span><br><br><span class="hljs-comment">// 如果是unknow 是不能调用属性和方法</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">obj</span>: <span class="hljs-built_in">unknown</span> = &#123; <span class="hljs-attr">b</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">ccc</span>:(): <span class="hljs-function"><span class="hljs-params">number</span>=&gt;</span><span class="hljs-number">213</span> &#125;<br>obj.<span class="hljs-property">b</span><br>obj.<span class="hljs-title function_">ccc</span>()<br></code></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习TypeScript 1 (基础类型)</title>
    <link href="/2022/02/24/%E5%AD%A6%E4%B9%A0TypeScript%201%EF%BC%88%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B%EF%BC%89/"/>
    <url>/2022/02/24/%E5%AD%A6%E4%B9%A0TypeScript%201%EF%BC%88%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h1><p>TypeScript是JavaScript的超集，所以JavaScript的类型都包含在内</p><blockquote><p>起步</p></blockquote><ul><li><p>全局安装TypeScript</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># npm install typescript -g</span><br></code></pre></td></tr></table></figure></li><li><p>在终端运行tsc 文件名</p></li><li><p>基础类型：Boolean、Number、String、<code>null</code>、<code>undefined</code> 以及 ES6 的  <a href="http://es6.ruanyifeng.com/#docs/symbol" title="Symbol">Symbol</a> 和 ES10 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt" title="BigInt">BigInt</a>。</p></li></ul><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul><li><p>字符串是使用String定义的，如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;123&#x27;</span><br><span class="hljs-comment">// 普通声明</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`abc<span class="hljs-subst">$&#123;d&#125;</span>`</span><br><span class="hljs-comment">// 也可使用es6的模板字符串</span><br></code></pre></td></tr></table></figure></li></ul><!----><ul><li>其中 <code>`</code> 用来定义 <a href="http://es6.ruanyifeng.com/#docs/string#%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2" title="ES6 中的模板字符串">ES6 中的模板字符串</a>，<code>$&#123;expr&#125;</code> 用来在模板字符串中嵌入表达式。</li></ul><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><ol><li><p>支持十六进制、十进制、八进制和二进制</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">notANumber</span>: <span class="hljs-built_in">number</span> = <span class="hljs-title class_">NaN</span>;           <span class="hljs-comment">// Nan</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">123</span>;                  <span class="hljs-comment">// 普通数字</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">infinityNumber</span>: <span class="hljs-built_in">number</span> = <span class="hljs-title class_">Infinity</span>;  <span class="hljs-comment">// 无穷大</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">decimal</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">10</span>;               <span class="hljs-comment">// 十进制</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">hex</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0xf00d</span>;               <span class="hljs-comment">// 十六进制</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">binary</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0b1010</span>;            <span class="hljs-comment">// 二进制</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">octal</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0o744</span>;              <span class="hljs-comment">// 八进制</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="3-布尔类型"><a href="#3-布尔类型" class="headerlink" title="3.布尔类型"></a>3.布尔类型</h3><blockquote><p>注意，使用构造函数 <code>Boolean</code> 创造的对象<strong>不是</strong>布尔值：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">createdBoolean</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-number">1</span>)<br><span class="hljs-comment">//这样会报错 应为事实上 new Boolean() 返回的是一个 Boolean 对象 </span><br><br></code></pre></td></tr></table></figure></blockquote><ul><li><p>事实上<code>new Boolean()</code>返回的是一个<code>Boolean</code>对象，需要改为：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">createdBoolean</span>: <span class="hljs-title class_">Boolean</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">booleand</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>        <span class="hljs-comment">// 可以直接使用布尔值</span><br> <br><span class="hljs-keyword">let</span> <span class="hljs-attr">booleand2</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-title class_">Boolean</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 也可以通过函数返回布尔值</span><br></code></pre></td></tr></table></figure><h3 id="空值类型"><a href="#空值类型" class="headerlink" title="空值类型"></a>空值类型</h3><ul><li><p>JavaScript 没有空值（Void）的概念，在 <a href="https://so.csdn.net/so/search?q=TypeScript&spm=1001.2101.3001.7020" title="TypeScript">TypeScript</a> 中，可以用 <code>void</code> 表示没有任何返回值的函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">voidFn</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;This is a function with no return value&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><blockquote><p><code>void</code> 类型的用法，主要是用在我们<strong>不希望</strong>调用者关心函数返回值的情况下，比如通常的<strong>异步回调函数</strong></p></blockquote><ul><li><p>void也可以定义undefined 和 null 类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">u</span>: <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">n</span>: <span class="hljs-built_in">void</span> = <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Null和undefined类型"><a href="#Null和undefined类型" class="headerlink" title="Null和undefined类型"></a>Null和undefined类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">u</span>: <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span>  <span class="hljs-comment">// 定义 undefined</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">n</span>: <span class="hljs-built_in">void</span> = <span class="hljs-literal">null</span>       <span class="hljs-comment">// 定义 null</span><br></code></pre></td></tr></table></figure><blockquote><p>void 和 undefined 和 null 最大的区别</p><p>与 <code>void</code> 的区别是，<code>undefined</code> 和 <code>null</code> 是所有类型的子类型。也就是说 <code>undefined</code> 类型的变量，可以赋值给 string 类型的变量：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 这样写会报错 void类型不可以分给其他类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">test</span>: <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">num2</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;1&quot;</span><br><br>num2 = test<br></code></pre></td></tr></table></figure></blockquote><ul><li><p>需改为：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//这样是没问题的</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">test</span>: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">num2</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;1&quot;</span><br> <br>num2 = test<br> <br><span class="hljs-comment">//或者这样的</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">test</span>: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">num2</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;1&quot;</span><br> <br>num2 = test<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>📌注意：如果你配置了 tsconfig.json 开启严格模式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;strict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></blockquote><p><strong>null 不能 赋予 void 类型</strong></p>]]></content>
    
    
    <categories>
      
      <category>学习TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
